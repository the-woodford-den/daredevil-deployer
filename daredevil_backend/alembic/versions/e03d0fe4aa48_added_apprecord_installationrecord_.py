"""Added AppRecord, InstallationRecord, Repository, and User models

Revision ID: e03d0fe4aa48
Revises:
Create Date: 2025-10-13 16:39:57.903698

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "e03d0fe4aa48"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "github_app_records",
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("slug", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "node_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "client_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "description", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "external_url", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "html_url", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("github_app_id", sa.Integer(), nullable=False),
        sa.Column("token", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "expires_at", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_github_app_records_id"),
        "github_app_records",
        ["id"],
        unique=False,
    )
    op.create_table(
        "github_installation_records",
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("app_id", sa.Integer(), nullable=False),
        sa.Column(
            "app_slug", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "access_tokens_url",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=False,
        ),
        sa.Column(
            "html_url", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "repositories_url",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=False,
        ),
        sa.Column("installation_id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_github_installation_records_id"),
        "github_installation_records",
        ["id"],
        unique=False,
    )
    op.create_table(
        "github_repositories",
        sa.Column(
            "created_at", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "updated_at", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("node_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "full_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("private", sa.Boolean(), nullable=True),
        sa.Column(
            "html_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "description", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("fork", sa.Boolean(), nullable=True),
        sa.Column("url", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "archive_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "assignees_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "blobs_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "branches_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "collaborators_url",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column(
            "comments_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "commits_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "compare_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "contents_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "contributors_url",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column(
            "deployments_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "downloads_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "events_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "forks_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "git_commits_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "git_refs_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "git_tags_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("git_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "issue_comment_url",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column(
            "issue_events_url",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column(
            "issues_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "keys_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "labels_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "languages_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "merges_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "milestones_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "notifications_url",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column(
            "pulls_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "releases_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("ssh_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "stargazers_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "statuses_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "subscribers_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "subscription_url",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column(
            "tags_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "teams_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "trees_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "clone_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "mirror_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "hooks_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("svn_url", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "homepage", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "language", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("forks_count", sa.Integer(), nullable=True),
        sa.Column("stargazers_count", sa.Integer(), nullable=True),
        sa.Column("watchers_count", sa.Integer(), nullable=True),
        sa.Column("size", sa.Integer(), nullable=True),
        sa.Column(
            "default_branch", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("open_issues_count", sa.Integer(), nullable=True),
        sa.Column("is_template", sa.Boolean(), nullable=True),
        sa.Column("has_issues", sa.Boolean(), nullable=True),
        sa.Column("has_projects", sa.Boolean(), nullable=True),
        sa.Column("has_wiki", sa.Boolean(), nullable=True),
        sa.Column("has_pages", sa.Boolean(), nullable=True),
        sa.Column("has_downloads", sa.Boolean(), nullable=True),
        sa.Column("archived", sa.Boolean(), nullable=True),
        sa.Column("disabled", sa.Boolean(), nullable=True),
        sa.Column(
            "visibility", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "pushed_at", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("allow_rebase_merge", sa.Boolean(), nullable=True),
        sa.Column(
            "template_repository",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column(
            "temp_clone_token",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column("allow_squash_merge", sa.Boolean(), nullable=True),
        sa.Column("allow_auto_merge", sa.Boolean(), nullable=True),
        sa.Column("delete_branch_on_merge", sa.Boolean(), nullable=True),
        sa.Column("allow_merge_commit", sa.Boolean(), nullable=True),
        sa.Column("subscribers_count", sa.Integer(), nullable=True),
        sa.Column("network_count", sa.Integer(), nullable=True),
        sa.Column("forks", sa.Integer(), nullable=True),
        sa.Column("open_issues", sa.Integer(), nullable=True),
        sa.Column("watchers", sa.Integer(), nullable=True),
        sa.Column("github_repository_id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_github_repositories_id"),
        "github_repositories",
        ["id"],
        unique=False,
    )
    op.create_table(
        "users",
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "access_token", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "avatar_url", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "client_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "device_code", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "events_url", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "expires_in", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "followers_url", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "following_url", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "gists_url", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("github_id", sa.Integer(), nullable=False),
        sa.Column(
            "gravatar_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "html_url", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("interval", sa.Integer(), nullable=True),
        sa.Column("login", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "node_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "organizations_url",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=False,
        ),
        sa.Column(
            "received_events_url",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=False,
        ),
        sa.Column(
            "repos_url", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("site_admin", sa.Boolean(), nullable=False),
        sa.Column(
            "starred_url", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "subscriptions_url",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=False,
        ),
        sa.Column("type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("url", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "user_code", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "user_view_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "verification_uri",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_table("users")
    op.drop_index(
        op.f("ix_github_repositories_id"), table_name="github_repositories"
    )
    op.drop_table("github_repositories")
    op.drop_index(
        op.f("ix_github_installation_records_id"),
        table_name="github_installation_records",
    )
    op.drop_table("github_installation_records")
    op.drop_index(
        op.f("ix_github_app_records_id"), table_name="github_app_records"
    )
    op.drop_table("github_app_records")
    # ### end Alembic commands ###
